[gd_resource type="VisualShader" load_steps=3 format=3 uid="uid://bkmt3g22l6h6p"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_5vl6r"]
output_port_for_preview = 0
input_name = "color"

[sub_resource type="VisualShaderNodeBillboard" id="VisualShaderNodeBillboard_3uevj"]
billboard_type = 3
keep_scale = true

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, unshaded;




void vertex() {
	mat4 n_out2p0;
// GetBillboardMatrix:2
	{
		mat4 __wm = mat4(normalize(INV_VIEW_MATRIX[0]), normalize(INV_VIEW_MATRIX[1]), normalize(INV_VIEW_MATRIX[2]), MODEL_MATRIX[3]);
		__wm = __wm * mat4(vec4(cos(INSTANCE_CUSTOM.x), -sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));
		__wm = __wm * mat4(vec4(length(MODEL_MATRIX[0].xyz), 0.0, 0.0, 0.0), vec4(0.0, length(MODEL_MATRIX[1].xyz), 0.0, 0.0), vec4(0.0, 0.0, length(MODEL_MATRIX[2].xyz), 0.0), vec4(0.0, 0.0, 0.0, 1.0));
		n_out2p0 = VIEW_MATRIX * __wm;
	}


// Output:0
	MODELVIEW_MATRIX = n_out2p0;


}

void fragment() {
// Input:2
	vec4 n_out2p0 = COLOR;


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);


}
"
flags/unshaded = true
nodes/vertex/2/node = SubResource("VisualShaderNodeBillboard_3uevj")
nodes/vertex/2/position = Vector2(-260, 380)
nodes/vertex/connections = PackedInt32Array(2, 0, 0, 10)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_5vl6r")
nodes/fragment/2/position = Vector2(-296.12, 360.92)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0)
